import type { DjsCorePlugin } from "djs-core";
import { unlinkSync } from "fs";
import { resolve } from "path";

// @ts-ignore - the module will be generated by `prisma generate`
export type { PrismaClient } from "@prisma/client";
// @ts-ignore – conditional aggregation as long as the client does not exist
declare module "@prisma/client" {
    export interface PrismaClient { }
}

export interface PrismaPluginOptions {
    schemaPath?: string;
}

const CLIENT_TYPE_EXTENSION = `import type { PrismaClient } from "@prisma/client";
declare module "discord.js" {
  interface Client {
    db: PrismaClient;
  }
}`;

async function fileExists(path: string): Promise<boolean> {
    const { existsSync } = await import("fs");
    return existsSync(path);
}

async function installPrismaClient(outDir: string): Promise<void> {
    const clientDir = resolve(outDir, "node_modules", "@prisma", "client");
    if (await fileExists(clientDir)) return;

    console.log("📦 Installation de @prisma/client dans dist…");
    const installCmd = [
        "npm",
        "install",
        "--silent",
        "--omit=dev",
        "@prisma/client@latest",
        "--prefix",
        outDir,
    ];
    const proc = Bun.spawnSync({ cmd: installCmd });
    if (proc.exitCode !== 0) {
        throw new Error(`npm install @prisma/client a échoué\n${new TextDecoder().decode(proc.stderr)}`);
    }

    const lockPath = resolve(outDir, "package-lock.json");
    if (await fileExists(lockPath)) unlinkSync(lockPath);
}

async function generatePrisma(outDir: string, schemaRel: string): Promise<void> {
    const schemaDist = resolve(outDir, schemaRel);
    const cmd = ["npx", "prisma", "generate", "--schema", schemaDist];

    console.log("🛠  prisma generate (post-build)…");
    const proc = Bun.spawnSync({ cmd, cwd: outDir });
    if (proc.exitCode !== 0) {
        throw new Error(`prisma generate a échoué\n${new TextDecoder().decode(proc.stderr)}`);
    }
}

async function loadPrismaClient(projectRoot: string): Promise<any> {
    try {
        const mod = await import(resolve(projectRoot, "node_modules", "@prisma", "client"));
        return mod.PrismaClient;
    } catch (err: any) {
        if (err.code === "MODULE_NOT_FOUND" || /Cannot find module/.test(err.message)) {
            console.error("🛠  @prisma/client introuvable, exécutez 'prisma generate'");
            process.exit(1);
        }
        throw err;
    }
}

export function DjsPrismaPlugin(opts: PrismaPluginOptions = {}): DjsCorePlugin {
    const schemaRel = opts.schemaPath ?? "./prisma/schema.prisma";

    return {
        name: "djs-prisma",

        runtimeDeps: {
            "@prisma/client": "latest",
        },

        devDeps: {
            prisma: "latest",
        },

        buildArtifacts: ["./prisma"],

        async onDev(ctx) {
            const schemaAbs = resolve(ctx.root, schemaRel);
            if (!(await fileExists(schemaAbs))) {
                console.warn(`⚠️  Schéma Prisma non trouvé (${schemaRel}), génération ignorée.`);
            }
        },

        async onPostBuild(ctx) {
            const schemaDist = resolve(ctx.outDir, schemaRel);
            if (!(await fileExists(schemaDist))) {
                console.warn(`⚠️  Schéma Prisma non trouvé dans dist (${schemaRel}), génération ignorée.`);
                return;
            }

            try {
                await installPrismaClient(ctx.outDir);
                await generatePrisma(ctx.outDir, schemaRel);
            } catch (err) {
                console.error("❌ Erreur lors du processus post-build :", err);
            }
        },

        async setupClient(client, projectRoot = process.cwd()) {
            const PrismaClient = await loadPrismaClient(projectRoot);
            const prisma = new PrismaClient();

            await prisma.$connect();
            (client as any).db = prisma;

            process.once("beforeExit", () => {
                prisma.$disconnect().catch(() => { });
            });
        },

        extendTypes() {
            return CLIENT_TYPE_EXTENSION;
        },
    };
}

export default DjsPrismaPlugin; 